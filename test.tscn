[gd_scene load_steps=2 format=3 uid="uid://dgpjxt0ui0cac"]

[sub_resource type="GDScript" id="GDScript_ekms2"]
script/source = "extends Node3D

var rd: RenderingDevice
var framebuffer
var vertex_array
var index_array
var pipeline
var clear_color_values
var framebuf_texture

func _ready():
	rd= RenderingServer.create_local_rendering_device()
	var tex_format:=RDTextureFormat.new()
	var tex_view:=RDTextureView.new()
	tex_format.texture_type=RenderingDevice.TEXTURE_TYPE_2D
	tex_format.height=1024
	tex_format.width=1024
	tex_format.format=RenderingDevice.DATA_FORMAT_R8G8B8A8_UINT
	tex_format.usage_bits=(RenderingDevice.TEXTURE_USAGE_COLOR_ATTACHMENT_BIT | RenderingDevice.TEXTURE_USAGE_CAN_COPY_FROM_BIT) 
	framebuf_texture=rd.texture_create(tex_format,tex_view)

	var shader_file = load(\"res://shader.glsl\")
	var shader_spirv: RDShaderSPIRV = shader_file.get_spirv()
	var shader := rd.shader_create_from_spirv(shader_spirv)
	
	var points := PackedFloat32Array([
		0, 0, 0,
		0, 1 ,0,
		1,1,0,
				1,0,0
	])
	var points_bytes := points.to_byte_array()
	
	var indices:= PackedByteArray()
	indices.resize(12)
	var pos:=0
	for x in [0,2,1,0,2,3]:
		indices.encode_s16(pos,x)
		pos+=2
	var index_buffer=rd.index_buffer_create(6,RenderingDevice.INDEX_BUFFER_FORMAT_UINT16,indices)
	index_array=rd.index_array_create(index_buffer,0,6)
	
	var vertex_buffers := [
		rd.vertex_buffer_create(points_bytes.size(), points_bytes),
	]
	
	var vertex_attrs = [ RDVertexAttribute.new()]
	vertex_attrs[0].format = RenderingDevice.DATA_FORMAT_R32G32B32_SFLOAT
	vertex_attrs[0].location = 0
	vertex_attrs[0].stride=4*3
	var vertex_format = rd.vertex_format_create(vertex_attrs)
	vertex_array = rd.vertex_array_create(4, vertex_format, vertex_buffers)
		
	var blend = RDPipelineColorBlendState.new()
	blend.attachments.push_back(RDPipelineColorBlendStateAttachment.new())	
	
	var attachments=[]
	var af:=RDAttachmentFormat.new()
	af.set_format(tex_format.format)
	af.set_samples(RenderingDevice.TEXTURE_SAMPLES_1)
	af.usage_flags = RenderingDevice.TEXTURE_USAGE_COLOR_ATTACHMENT_BIT | RenderingDevice.TEXTURE_USAGE_CAN_COPY_FROM_BIT
	attachments.push_back(af)
	
	var framebuf_format=rd.framebuffer_format_create(attachments)
	
	# second param means to check that this framebuffer has correct format
	framebuffer = rd.framebuffer_create([framebuf_texture],framebuf_format)
	
	print(rd.framebuffer_is_valid(framebuffer))
	
	pipeline = rd.render_pipeline_create(
		shader,
		rd.framebuffer_get_format(framebuffer),
		vertex_format,
		RenderingDevice.RENDER_PRIMITIVE_TRIANGLES,
		RDPipelineRasterizationState.new(),
		RDPipelineMultisampleState.new(),
		RDPipelineDepthStencilState.new(),
		blend
	)

	print(rd.render_pipeline_is_valid(pipeline))
	clear_color_values= PackedColorArray([Color(1,1,0,1)])
		
func _process(delta):
	var draw_list := rd.draw_list_begin(framebuffer, RenderingDevice.INITIAL_ACTION_CLEAR, RenderingDevice.FINAL_ACTION_READ, RenderingDevice.INITIAL_ACTION_CLEAR, RenderingDevice.FINAL_ACTION_CONTINUE,clear_color_values)
	rd.draw_list_bind_render_pipeline(draw_list, pipeline)
	rd.draw_list_bind_vertex_array(draw_list, vertex_array)
	rd.draw_list_bind_index_array(draw_list,index_array)
	rd.draw_list_draw(draw_list, true, 2)
	rd.draw_list_end(RenderingDevice.BARRIER_MASK_ALL_BARRIERS)
	var td=rd.texture_get_data(framebuf_texture,0)
	print(\"frame data:\",td[4*(10*512+10)]) # this pixel should be set to black by the draw list above
"

[node name="test" type="Node3D"]
script = SubResource("GDScript_ekms2")
